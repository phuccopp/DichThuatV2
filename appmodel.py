from flask import Flask, request, jsonify, send_from_directory
import csv

# --- Kh·ªüi t·∫°o Flask ---
app = Flask(__name__, static_folder='static')

# --- Load dictionary CSV ---
dictionary = {}
with open("dictionary.csv", newline='', encoding="utf-8") as f:
    reader = csv.DictReader(f)
    for row in reader:
        key = row["english"].strip().lower()
        dictionary[key] = {
            "phonetic": row["phonetic"].strip(),
            "vietnamese": row["vietnamese"].strip(),
        }

# --- Lazy load model (ch·ªâ t·∫£i khi c·∫ßn) ---
model = None
tokenizer = None
model_name = "Helsinki-NLP/opus-mt-en-vi"

def load_model():
    """Ch·ªâ t·∫£i model khi c·∫ßn d√πng ƒë·ªÉ ti·∫øt ki·ªám RAM."""
    global model, tokenizer
    if model is None or tokenizer is None:
        print("üîÑ ƒêang t·∫£i model l·∫ßn ƒë·∫ßu (s·∫Ω h∆°i l√¢u)...", flush=True)
        from transformers import MarianMTModel, MarianTokenizer
        tokenizer = MarianTokenizer.from_pretrained(model_name)
        model = MarianMTModel.from_pretrained(model_name).to("cpu")
        print("‚úÖ Model ƒë√£ s·∫µn s√†ng!", flush=True)

def translate_en_to_vi(text):
    """D·ªãch b·∫±ng model Anh ‚Üí Vi·ªát"""
    inputs = tokenizer(text, return_tensors="pt", max_length=128, truncation=True)
    outputs = model.generate(**inputs, max_length=128, num_beams=5, no_repeat_ngram_size=2)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# --- Route trang ch·ªß ---
@app.route("/", methods=["GET"])
def home():
    return send_from_directory(app.static_folder, "index.html")

# --- API d·ªãch ---
@app.route("/translate", methods=["POST"])
def translate():
    data = request.json
    text = data.get("text", "").strip().lower()

    if not text:
        return jsonify({"result": ""})

    words = text.split()

    # N·∫øu ch·ªâ 1 t·ª´ -> tra dictionary
    if len(words) == 1:
        if text in dictionary:
            item = dictionary[text]
            result = f"{text} [{item['phonetic']}] ‚Üí {item['vietnamese']}"
        else:
            result = "Kh√¥ng t√¨m th·∫•y trong t·ª´ ƒëi·ªÉn."
    else:
        # N·∫øu t·ª´ 2 t·ª´ tr·ªü l√™n -> m·ªõi t·∫£i model (n·∫øu ch∆∞a t·∫£i)
        load_model()
        translation = translate_en_to_vi(text)
        result = translation

    return jsonify({"result": result})

# --- Ch·∫°y app (Render s·∫Ω t·ª± c·∫•p PORT) ---
if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
